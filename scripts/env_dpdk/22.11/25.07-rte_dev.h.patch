@@ -13,16 +13,17 @@
  * This file manages the list of device drivers.
  */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 #include <stdio.h>
 
 #include <rte_config.h>
 #include <rte_common.h>
+#include <rte_compat.h>
 #include <rte_log.h>
 
-#ifdef __cplusplus
-extern "C" {
-#endif
-
 struct rte_bus;
 struct rte_devargs;
 struct rte_device;
@@ -41,6 +42,19 @@
 					enum rte_dev_event_type event,
 					void *cb_arg);
 
+/* Macros to check for invalid function pointers */
+#define RTE_FUNC_PTR_OR_ERR_RET(func, retval) RTE_DEPRECATED(RTE_FUNC_PTR_OR_ERR_RET) \
+do { \
+	if ((func) == NULL) \
+		return retval; \
+} while (0)
+
+#define RTE_FUNC_PTR_OR_RET(func) RTE_DEPRECATED(RTE_FUNC_PTR_OR_RET) \
+do { \
+	if ((func) == NULL) \
+		return; \
+} while (0)
+
 /**
  * Device policies.
  */
@@ -232,6 +246,47 @@
  */
 typedef int (*rte_dev_cmp_t)(const struct rte_device *dev, const void *data);
 
+#define RTE_PMD_EXPORT_NAME_ARRAY(n, idx) n##idx[]
+
+#define RTE_PMD_EXPORT_NAME(name, idx) \
+static const char RTE_PMD_EXPORT_NAME_ARRAY(this_pmd_name, idx) \
+__rte_used = RTE_STR(name)
+
+#define DRV_EXP_TAG(name, tag) __##name##_##tag
+
+#define RTE_PMD_REGISTER_PCI_TABLE(name, table) \
+static const char DRV_EXP_TAG(name, pci_tbl_export)[] __rte_used = \
+RTE_STR(table)
+
+#define RTE_PMD_REGISTER_PARAM_STRING(name, str) \
+static const char DRV_EXP_TAG(name, param_string_export)[] \
+__rte_used = str
+
+/**
+ * Advertise the list of kernel modules required to run this driver
+ *
+ * This string lists the kernel modules required for the devices
+ * associated to a PMD. The format of each line of the string is:
+ * "<device-pattern> <kmod-expression>".
+ *
+ * The possible formats for the device pattern are:
+ *   "*"                     all devices supported by this driver
+ *   "pci:*"                 all PCI devices supported by this driver
+ *   "pci:v8086:d*:sv*:sd*"  all PCI devices supported by this driver
+ *                           whose vendor id is 0x8086.
+ *
+ * The format of the kernel modules list is a parenthesized expression
+ * containing logical-and (&) and logical-or (|).
+ *
+ * The device pattern and the kmod expression are separated by a space.
+ *
+ * Example:
+ * - "* igb_uio | uio_pci_generic | vfio"
+ */
+#define RTE_PMD_REGISTER_KMOD_DEP(name, str) \
+static const char DRV_EXP_TAG(name, kmod_dep_export)[] \
+__rte_used = str
+
 /**
  * Iteration context.
  *
@@ -299,6 +354,7 @@
  *   0 on successful initialization.
  *   <0 on error.
  */
+__rte_experimental
 int
 rte_dev_iterator_init(struct rte_dev_iterator *it, const char *str);
 
@@ -318,6 +374,7 @@
  *   NULL if an error occurred (rte_errno is set).
  *   NULL if no device could be found (rte_errno is not set).
  */
+__rte_experimental
 struct rte_device *
 rte_dev_iterator_next(struct rte_dev_iterator *it);
 
@@ -328,6 +385,9 @@
 	     dev = rte_dev_iterator_next(it))
 
 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * It registers the callback for the specific device.
  * Multiple callbacks can be registered at the same time.
  *
@@ -343,12 +403,16 @@
  *  - On success, zero.
  *  - On failure, a negative value.
  */
+__rte_experimental
 int
 rte_dev_event_callback_register(const char *device_name,
 				rte_dev_event_cb_fn cb_fn,
 				void *cb_arg);
 
 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * It unregisters the callback according to the specified device.
  *
  * @param device_name
@@ -364,12 +428,16 @@
  *  - On success, return the number of callback entities removed.
  *  - On failure, a negative value.
  */
+__rte_experimental
 int
 rte_dev_event_callback_unregister(const char *device_name,
 				  rte_dev_event_cb_fn cb_fn,
 				  void *cb_arg);
 
 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * Executes all the user application registered callbacks for
  * the specific device.
  *
@@ -378,47 +446,64 @@
  * @param event
  *  the device event type.
  */
+__rte_experimental
 void
 rte_dev_event_callback_process(const char *device_name,
 			       enum rte_dev_event_type event);
 
 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * Start the device event monitoring.
  *
  * @return
  *   - On success, zero.
  *   - On failure, a negative value.
  */
+__rte_experimental
 int
 rte_dev_event_monitor_start(void);
 
 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * Stop the device event monitoring.
  *
  * @return
  *   - On success, zero.
  *   - On failure, a negative value.
  */
+__rte_experimental
 int
 rte_dev_event_monitor_stop(void);
 
 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * Enable hotplug handling for devices.
  *
  * @return
  *   - On success, zero.
  *   - On failure, a negative value.
  */
+__rte_experimental
 int
 rte_dev_hotplug_handle_enable(void);
 
 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * Disable hotplug handling for devices.
  *
  * @return
  *   - On success, zero.
  *   - On failure, a negative value.
  */
+__rte_experimental
 int
 rte_dev_hotplug_handle_disable(void);
 
@@ -442,6 +527,7 @@
  *	0 if mapping was successful.
  *	Negative value and rte_errno is set otherwise.
  */
+__rte_experimental
 int
 rte_dev_dma_map(struct rte_device *dev, void *addr, uint64_t iova, size_t len);
 
@@ -465,6 +551,7 @@
  *	0 if un-mapping was successful.
  *	Negative value and rte_errno is set otherwise.
  */
+__rte_experimental
 int
 rte_dev_dma_unmap(struct rte_device *dev, void *addr, uint64_t iova,
 		  size_t len);
